trigger:
- master

resources:
- repo: self 

variables:
- group: Docker
#  ImageName: 'shruti1402/my-flask-app-new175'
#variables:
#  tag: '$(Build.BuildId)'

pr:
- "*"
stages:

#- stage: Build
#  jobs:
#  - deployment: DeployJob
#    environment: 'test'
#  - job: BuildJob
#    pool:
#      vmImage: ubuntu-latest

#    steps:
#    - task: Docker@1
#      displayName: 'Build the Docker image'
#      inputs:
#        containerregistrytype: 'Container Registry'
#        dockerRegistryEndpoint: 'Docker Hub'
#        command: 'Build an image'
#        dockerFile: '$(Build.SourcesDirectory)/flask/Dockerfile'
#        ImageName: '$(ImageName)'
#        tags: latest
#        buildContext: '$(Build.SourcesDirectory)/app.py'
#        repository: '$(DOCKER_REPOSITORY_NAME)'
#      env:
#        DOCKER_USERNAME: $(DOCKER_USERNAME)
#        DOCKER_PASSWORD: $(DOCKER_PASSWORD)
#        DOCKER_REPOSITORY_NAME: $(DOCKER_REPOSITORY_NAME)

  
#    - task: Docker@1
#      displayName: 'Push the Docker image to Dockerhub'
#      inputs:
#        containerregistrytype: 'Container Registry'
#        dockerRegistryEndpoint: 'Docker Hub'
#        command: 'Push an image'
#        ImageName: '$(ImageName)'
#        tags: latest
#        DOCKER_REPOSITORY_NAME: '$(DOCKER_REPOSITORY_NAME)'
#      env:
#        DOCKER_USERNAME: $(DOCKER_USERNAME)
#        DOCKER_PASSWORD: $(DOCKER_PASSWORD)
#        DOCKER_REPOSITORY_NAME: $(DOCKER_REPOSITORY_NAME)

- stage: Deploy
  displayName: Deploy to EC2
  jobs:
  - deployment: DeployJob
    environment: 'test'
  - job: Deploy
    pool:
      vmImage: ubuntu-latest
    displayName: Deploy to EC2
    steps:
    - task: Docker@0
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'Docker Hub'
        command: 'Run a Docker command'
        ImageName: '$(ImageName)'
        tags: latest
        dockerFile: '$(Build.SourcesDirectory)/flask/Dockerfile'
        DOCKER_REPOSITORY_NAME: '$(DOCKER_REPOSITORY_NAME)'
        repository: '$(DOCKER_REPOSITORY_NAME)'
        EC2_SSH_KEY: '$(EC2_SSH_KEY)'
        USERNAME: ubuntu
        HOST_DNS: '$(HOST_DNS)'
        EC2_PUBLIC_IP: '$(EC2_PUBLIC_IP)'
        SSH_PRIVATE_KEY: '$(SSH_PRIVATE_KEY)'
      env:
        DOCKER_USERNAME: $(DOCKER_USERNAME)
        DOCKER_PASSWORD: $(DOCKER_PASSWORD)
        DOCKER_REPOSITORY_NAME: $(DOCKER_REPOSITORY_NAME)
    - script: |
        sudo docker login 
        sudo docker images
        sudo docker pull shruti1402/my-flask-app-new175:latest
        echo "$SSH_PRIVATE_KEY" > private_key.pem
        sudo chmod 777 private_key.pem
        cd .ssh
        ls -al
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set region us-east-1
        sudo ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@52.73.82.30 "aws s3 ls"
        

      displayName: 'SSH into EC2 and Pull Docker Image'

    
        
#  - job: Deploy
#    dependsOn: BuildJob
#    steps:
#    - checkout: self

#    - task: UsePythonVersion@0
#      inputs:
#        versionSpec: '3.x'
#        addToPath: true
#      displayName: 'Set up Python 3.x'

#    - script: |
#        sudo apt update -y 
#        sudo apt install awscli

#      displayName: 'Install Aws CLI' 
#    - script: |
#        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
#       aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
#        aws configure set region us-east-1
#      displayName: 'Configure AWS Credentials'

#    - script: |
#      aws s3 ls
#        sudo ssh -i $(EC2_SSH_KEY) ubuntu@$(EC2_PUBLIC_IP) 
#      aws login --service-principal -u $(AZURE_SP_ID) -p $(AZURE_SP_SECRET) --tenant $(AZURE_SP_TENANT)
#      aws login --name shruti1402
#      displayName: 'Log in to Aws ec2'

#    - script: |
#        docker pull $(ImageName)
#      docker stop flask_img_new
#      docker rm flask_img_new
#      docker run -d --name flask_img_new -p 8000:8000 shruti1402/my-flask-app-new
#      displayName: 'Pull and run Docker image'




  
