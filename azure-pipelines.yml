trigger:
- master

resources:
- repo: self 

variables:
- group: Docker
#  ImageName: 'shruti1402/my-flask-app-new175'
#variables:
#  tag: '$(Build.BuildId)'

pr:
- "*"
stages:

- stage: Build
  jobs:
  - deployment: DeployJob
    environment: 'test'
  - job: BuildJob
    pool:
      vmImage: ubuntu-latest

    steps:
    - task: Docker@1
      displayName: 'Build the Docker image'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'Docker Hub'
        command: 'Build an image'
        dockerFile: '$(Build.SourcesDirectory)/flask/Dockerfile'
        ImageName: '$(ImageName)'
        buildContext: '$(Build.SourcesDirectory)/app.py'
        repository: '$(DOCKER_REPOSITORY_NAME)'
      env:
        DOCKER_USERNAME: $(DOCKER_USERNAME)
        DOCKER_PASSWORD: $(DOCKER_PASSWORD)
        DOCKER_REPOSITORY_NAME: $(DOCKER_REPOSITORY_NAME)

  
    - task: Docker@1
      displayName: 'Push the Docker image to Dockerhub'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'Docker Hub'
        command: 'Push an image'
        ImageName: '$(ImageName)'
        DOCKER_REPOSITORY_NAME: '$(DOCKER_REPOSITORY_NAME)'
      env:
        DOCKER_USERNAME: $(DOCKER_USERNAME)
        DOCKER_PASSWORD: $(DOCKER_PASSWORD)
        DOCKER_REPOSITORY_NAME: $(DOCKER_REPOSITORY_NAME)

- stage: Deploy
  displayName: Deploy to EC2
  jobs:
  - job: Deploy
    displayName: Deploy to EC2
    steps:
    - script: 
        echo "$SSH_PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        scp -o "StrictHostKeyChecking no" -i private_key.pem Dockerfile ubuntu@$EC2_PUBLIC_IP:~/Dockerfile
        sudo ssh -i $SSH_PRIVATE_KEY ubuntu@$EC2_PUBLIC_IP "sudo docker login"
        sudo ssh -i $SSH_PRIVATE_KEY ubuntu@$EC2_PUBLIC_IP "sudo docker images"
        ssh -o "StrictHostKeyChecking no" -i $SSH_PRIVATE_KEY ubuntu@$EC2_PUBLIC_IP "sudo docker pull $ImageName"
        ssh -o "StrictHostKeyChecking no" -i $SSH_PRIVATE_KEY ubuntu@$EC2_PUBLIC_IP "sudo docker run -d -p 8000:8000 $ImageName"
      displayName: 'SSH into EC2 and Pull Docker Image'

    
        
#    - task: Docker@1 
#      displayName: 'Pull the Docker image from Dockerhub'
#      inputs:
#        containerregistrytype: 'Container Registry'
#        dockerRegistryEndpoint: 'Docker Hub'
#        command: 'Pull an image'
#        ImageName: '$(ImageName)'
#        DOCKER_REPOSITORY_NAME: '$(DOCKER_REPOSITORY_NAME)'
#       EC2_SSH_KEY: '$(EC2_SSH_KEY)'
#        USERNAME: ubuntu
#        HOST_DNS: '$(HOST_DNS)'
#        EC2_PUBLIC_IP: '$(EC2_PUBLIC_IP)'
#        SSH_PRIVATE_KEY: '$(SSH_PRIVATE_KEY)'
#      env:
##        DOCKER_USERNAME: $(DOCKER_USERNAME)
#        DOCKER_PASSWORD: $(DOCKER_PASSWORD)
#        EC2_SSH_KEY: $(EC2_SSH_KEY)
#        USERNAME: ubuntu
#        HOST_DNS: $(HOST_DNS)
#        DOCKER_REPOSITORY_NAME: $(DOCKER_REPOSITORY_NAME)
#    - script: |
#        echo "$SSH_PRIVATE_KEY" > private_key.pem
#        chmod 600 private_key.pem
#        scp -o "StrictHostKeyChecking no" -i private_key.pem Dockerfile ubuntu@$EC2_PUBLIC_IP:~/Dockerfile
##        ssh -o "StrictHostKeyChecking no" -i $SSH_PRIVATE_KEY ubuntu@$EC2_PUBLIC_IP "sudo docker login"
#        ssh -o "StrictHostKeyChecking no" -i $SSH_PRIVATE_KEY ubuntu@$EC2_PUBLIC_IP "sudo docker images"
#        ssh -o "StrictHostKeyChecking no" -i $SSH_PRIVATE_KEY ubuntu@$EC2_PUBLIC_IP "sudo docker pull $ImageName"
#        ssh -o "StrictHostKeyChecking no" -i $SSH_PRIVATE_KEY ubuntu@$EC2_PUBLIC_IP "sudo docker run -d -p 8000:8000 $ImageName"
#      displayName: 'SSH into EC2 and Pull Docker Image'



  
